(dp1
S'output'
p2
S"<class 'serial.serialutil.SerialException'> could not open port 'COM3': WindowsError(5, 'Acesso negado.')"
p3
sS'layer'
p4
S'C:\\Python27\\web2py\\applications\\Arduino\\models\\db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\nimport serial\n\nSERIAIS = dict()\n\nif not request.env.web2py_runtime_gae:\n    db = DAL("sqlite://storage.sqlite")\nelse:\n    db = DAL("google:datastore+ndb")\n    session.connect(request, response, db=db)\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n\nfrom gluon.tools import Auth, Service, PluginManager\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n# create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n\nSerial = db.define_table("serial",\n\t\tField("device", "string", length=11, requires=IS_NOT_EMPTY(), notnull=True, unique=True),\n\t\tField("baud_rate", "integer", length=11, label="Baud Rate", comment=None, default=9600),\n\t\tField("timeout", "integer", length=11, label="Timeout", comment=None, default=1),\n\t\tField("parity", "string", length=1, label="Parity", comment=None, default="N"),\n\t\tField("stopbits", "integer", length=11, label="Stopbits", comment=None, default=1),\n\t\tField("bytesize", "integer", length=11, label="Bytesize", comment=None, default=8),\n\t\tField("status", "boolean", label="Status", comment=None),\n\t\tauth.signature,\n\t\tformat=\'%(device)s\'\n\t\t\n\t)\nSerial.is_active.readable = False\nSerial.is_active.writable = False\n\nGrupo = db.define_table("grupo",\n\t\tField("nome", "string", label="Nome", length=50, requires=IS_NOT_EMPTY(), notnull=True),\n\t\tField("desc", "string", length=80, label="Descri\xc3\xa7\xc3\xa3o", comment=None),\n\t\tauth.signature,\n\t\tformat=\'%(nome)s\'\n\t)\nGrupo.is_active.readable = False\nGrupo.is_active.writable = False\n\nIcons = db.define_table("icons",\n\t\tField("nome", "string", length=60, label="Nome", requires=IS_NOT_EMPTY(), notnull=True),\n\t\tField("icon", "string", length=80, label="Icon", comment=None),\n\t\tauth.signature,\n\t\tformat=\'%(nome)s\'\n\t)\nIcons.is_active.readable = False\nIcons.is_active.writable = False\n\n\nEmbarcado = db.define_table("embarcado",\n\t\tField("id_serial",Serial, label="Serial", requires=IS_NOT_EMPTY(), notnull=True),\n\t\tField("id_grupo",Grupo , label="Grupo", requires=IS_NOT_EMPTY(), notnull=True),\n\t\tField("id_icon",Icons , label="Icons", requires=IS_NOT_EMPTY(), notnull=True),\n\t\tField("nome", "string", length=80, label="Nome", comment=None),\n\t\tField("descricao", "string", length=80, label="Descri\xc3\xa7\xc3\xa3o", comment=None),\n\t\tField("codigo_arduino", "integer", length=11, label="Arduino Cod.", comment=None),\n\t\tField("status", "boolean", label="Status", comment=None),\n\t\tauth.signature\n\t)\nEmbarcado.is_active.readable = False\nEmbarcado.is_active.writable = False\nEmbarcado.id_serial.requires = IS_IN_DB(db, Serial.id, Serial._format)\nEmbarcado.id_grupo.requires = IS_IN_DB(db, Grupo.id, Grupo._format)\nEmbarcado.id_icon.requires = IS_IN_DB(db, Icons.id, Icons._format)\n\n\n\nfor row in db((Serial.id > 0) & (Serial.status == True)).select():\n\tSERIAIS[row.id] = serial.Serial(\n\t\trow.device,\n\t\trow.baud_rate,\n\t\ttimeout=row.timeout,\n\t\tbytesize=row.bytesize,\n\t\tstopbits=row.stopbits,\n\t\tparity=row.parity\n\t)\n\n\ndef status_device(st):\n\tif st:\n\t\treturn \'Ligado <i class="fa fa-toggle-on"></i>\'\n\telse:\n\t\treturn \'Desligado <i class="fa fa-toggle-off"></i>\'\n\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Python27\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Python27\\web2py\\applications\\Arduino\\models\\db.py", line 81, in <module>\n    parity=row.parity\n  File "build\\bdist.win32\\egg\\serial\\serialwin32.py", line 30, in __init__\n    super(Serial, self).__init__(*args, **kwargs)\n  File "build\\bdist.win32\\egg\\serial\\serialutil.py", line 176, in __init__\n    self.open()\n  File "build\\bdist.win32\\egg\\serial\\serialwin32.py", line 66, in open\n    raise SerialException("could not open port %r: %r" % (self.portstr, ctypes.WinError()))\nSerialException: could not open port \'COM3\': WindowsError(5, \'Acesso negado.\')\n'
p11
s.